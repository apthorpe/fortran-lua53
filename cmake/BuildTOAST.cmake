set(TOAST_SOURCE_DIR "${CMAKE_CURRENT_BINARY_DIR}/TOAST-source")
# set(TOAST_LOCAL_INSTALL_DIR "${CMAKE_CURRENT_BINARY_DIR}/TOAST-artifacts")

# Note: "<INSTALL_DIR>" is interpolated within ExternalProject_Add to
# TOAST_LOCAL_INSTALL_DIR
# list(APPEND TOAST_CMAKE_ARGS "-DCMAKE_INSTALL_PREFIX=<INSTALL_DIR>")

ExternalProject_Add(
    TOAST_external
    # Note: Use URL and URL_HASH [SHA512|SHA256|MD5]=4A54C0DE... to
    # download and checksum an archive. Note that URL may refer to a
    # local file, allowing this to work without net access.
    #
    # Note: This version does not contain installation directives
    # and will fail; see earlier revisions (master prior to 2020-10-19)
    # for scheme to directly associate artifacts from build directory
    # GIT_REPOSITORY         git@github.com:thomasms/toast.git
    GIT_REPOSITORY         https://github.com/thomasms/toast.git
    GIT_TAG                c1e313deaf21a4323b7e4e5b5686217b3d398efb
    # Aim at private fork which contains installation support;
    # change this to canonical source if/when installation support is
    # added
    # GIT_REPOSITORY         https://github.com/apthorpe/toast.git
    # GIT_TAG                e20897a40f73c15164f3fcedb8af98b2d5a9929b

    SOURCE_DIR             "${TOAST_SOURCE_DIR}"
    # Enable after installation works (except Fedora is stupid/evil)
#    INSTALL_DIR            "${TOAST_LOCAL_INSTALL_DIR}"
    # Skip installation (not currently working). Disable once
    # INSTALL_DIR works
    INSTALL_COMMAND        echo "Skipping install step for TOAST"
    CMAKE_ARGS             ${TOAST_CMAKE_ARGS}
    LOG_BUILD              YES
    USES_TERMINAL_DOWNLOAD YES
    USES_TERMINAL_UPDATE   YES
)

# TOAST fails to install; use subdirectories under TOAST-build for
# library and include directories. Alternately, use
# add_subdirectory(TOAST_SOURCE_DIR) and incorporate TOAST target into
# test app add_custom_target() configs
#
# Comment these once TOAST succesfully installs under
# $TOAST_LOCAL_INSTALL_DIR (also see above):
set(TOAST_LOCAL_INSTALL_DIR "${CMAKE_CURRENT_BINARY_DIR}/TOAST_external-prefix/src/TOAST_external-build")
##### Set Output Variables #####

# Set the following:
# - TOAST_LIB_NAME
# - TOAST_LIBRARY_DIR
# - TOAST_MODULE_DIR
# - TOAST_MODULE_FILE

# These variables are set to be compatible with the naming scheme used
# in original TOAST example CMake setup; see
# build/TOAST-source/examples/example1/CMakeLists.txt
set(TOAST_LIB_NAME toast)
set(TOAST_LIBRARY_DIR "${TOAST_LOCAL_INSTALL_DIR}/lib")
set(TOAST_MODULE_DIR "${TOAST_LOCAL_INSTALL_DIR}/include")

# Note: This needs to be manually added to the list of source files
# required for unit tests (maybe? Does TOAST_MODULE_DIR resolve this?)
set(TOAST_MODULE_FILE "${TOAST_MODULE_DIR}/toast.mod")
# Let the world know TOAST_MODULE_FILE is generated by TOAST_external
add_custom_command(
    OUTPUT "${TOAST_MODULE_FILE}"
    COMMAND echo "Manually associating ${TOAST_MODULE_FILE} with TOAST_external"
    DEPENDS TOAST_external
)

set(TOAST_FOUND ON)
# __END__